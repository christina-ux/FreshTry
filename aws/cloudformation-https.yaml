AWSTemplateFormatVersion: '2010-09-09'
Description: 'PolicyEdgeAI - Compliance Automation Platform with HTTPS and Custom Domain'

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment

  DomainName:
    Type: String
    Default: policyedgeai.com
    Description: Domain name for the application (must be registered in Route 53)

  APISubdomain:
    Type: String
    Default: api
    Description: Subdomain for the API (e.g. api.policyedgeai.com)

  DashboardSubdomain:
    Type: String
    Default: dashboard
    Description: Subdomain for the Streamlit dashboard (e.g. dashboard.policyedgeai.com)

  ECRRepositoryName:
    Type: String
    Default: policyedgeai
    Description: Name of the ECR repository where the Docker images are stored

  ECRImageTag:
    Type: String
    Default: latest
    Description: Tag of the Docker image to deploy

  APIContainerPort:
    Type: Number
    Default: 8000
    Description: Port the API container exposes

  StreamlitContainerPort:
    Type: Number
    Default: 8501
    Description: Port the Streamlit container exposes

  TaskCpu:
    Type: String
    Default: '1024'
    Description: CPU units for the ECS task

  TaskMemory:
    Type: String
    Default: '2048'
    Description: Memory (in MiB) for the ECS task

  DesiredCount:
    Type: Number
    Default: 2
    Description: Number of ECS tasks to run

  MaxCapacity:
    Type: Number
    Default: 4
    Description: Maximum number of ECS tasks to run during auto-scaling

  GitHubOwner:
    Type: String
    Default: your-github-username
    Description: GitHub repository owner (username or organization)

  GitHubRepo:
    Type: String
    Default: policyedgeai
    Description: GitHub repository name

  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to deploy

  EnableCICD:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to enable CI/CD pipeline

Conditions:
  IsProd: !Equals [ !Ref Environment, prod ]
  EnableCICDCondition: !Equals [ !Ref EnableCICD, 'true' ]

Resources:
  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-VPC-${Environment}

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-PublicSubnet1-${Environment}

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-PublicSubnet2-${Environment}

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-PrivateSubnet1-${Environment}

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-PrivateSubnet2-${Environment}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-IGW-${Environment}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-NAT1-EIP-${Environment}

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-NAT2-EIP-${Environment}

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-NAT1-${Environment}

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-NAT2-${Environment}

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-PublicRT-${Environment}

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-PrivateRT1-${Environment}

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-PrivateRT2-${Environment}

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # SSL Certificate
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub "*.${DomainName}"
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Certificate-${Environment}

  # DNS Records
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub "Hosted zone for ${DomainName}"

  APIDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub "${APISubdomain}.${DomainName}."
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt APIALB.CanonicalHostedZoneID
        DNSName: !GetAtt APIALB.DNSName

  DashboardDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub "${DashboardSubdomain}.${DomainName}."
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt StreamlitALB.CanonicalHostedZoneID
        DNSName: !GetAtt StreamlitALB.DNSName

  RootDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub "${DomainName}."
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt StreamlitALB.CanonicalHostedZoneID
        DNSName: !GetAtt StreamlitALB.DNSName

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-ALB-SG-${Environment}

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref APIContainerPort
          ToPort: !Ref APIContainerPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref StreamlitContainerPort
          ToPort: !Ref StreamlitContainerPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-ECS-SG-${Environment}

  # Load Balancers
  APIALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub policyedgeai-api-alb-${Environment}
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: routing.http2.enabled
          Value: 'true'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-API-ALB-${Environment}

  StreamlitALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub policyedgeai-ui-alb-${Environment}
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: routing.http2.enabled
          Value: 'true'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-UI-ALB-${Environment}

  # Target Groups
  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub policyedgeai-api-tg-${Environment}
      Port: !Ref APIContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-API-TG-${Environment}

  StreamlitTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub policyedgeai-ui-tg-${Environment}
      Port: !Ref StreamlitContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-UI-TG-${Environment}

  # HTTPS Listeners
  APIHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup
      LoadBalancerArn: !Ref APIALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01

  APIHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref APIALB
      Port: 80
      Protocol: HTTP

  StreamlitHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref StreamlitTargetGroup
      LoadBalancerArn: !Ref StreamlitALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01

  StreamlitHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref StreamlitALB
      Port: 80
      Protocol: HTTP

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub PolicyEdgeAI-Cluster-${Environment}
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Cluster-${Environment}

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/policyedgeai/${Environment}/*
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-TaskExecution-Role-${Environment}

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${S3Bucket}
                  - !Sub arn:aws:s3:::${S3Bucket}/*
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PolicyEdgeAI-*
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Task-Role-${Environment}

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Condition: EnableCICDCondition
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonECR-FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-CodeBuild-Role-${Environment}

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Condition: EnableCICDCondition
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonECR-FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:UpdateService
                  - ecs:RegisterTaskDefinition
                  - iam:PassRole
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-CodePipeline-Role-${Environment}

  # Parameter Store Parameters
  OpenAIAPIKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /policyedgeai/${Environment}/openai-api-key
      Type: SecureString
      Value: placeholder-replace-with-actual-key
      Description: OpenAI API Key
      Tags:
        Key: Name
        Value: !Sub PolicyEdgeAI-OpenAI-Key-${Environment}

  AnthropicAPIKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /policyedgeai/${Environment}/anthropic-api-key
      Type: SecureString
      Value: placeholder-replace-with-actual-key
      Description: Anthropic API Key
      Tags:
        Key: Name
        Value: !Sub PolicyEdgeAI-Anthropic-Key-${Environment}

  JWTSecretKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /policyedgeai/${Environment}/jwt-secret-key
      Type: SecureString
      Value: !Sub ${AWS::AccountId}-${AWS::Region}-${Environment}-jwt-key-placeholder
      Description: JWT Secret Key
      Tags:
        Key: Name
        Value: !Sub PolicyEdgeAI-JWT-Secret-${Environment}

  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub policyedgeai-data-${Environment}-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 90
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-S3-${Environment}

  # DynamoDB Tables
  ControlsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub PolicyEdgeAI-Controls-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: framework
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: FrameworkIndex
          KeySchema:
            - AttributeName: framework
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Controls-${Environment}

  ScoresTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub PolicyEdgeAI-Scores-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Scores-${Environment}

  UploadsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub PolicyEdgeAI-Uploads-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Uploads-${Environment}

  # CloudWatch Log Groups
  APILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/policyedgeai-api-${Environment}
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-API-Logs-${Environment}

  StreamlitLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/policyedgeai-ui-${Environment}
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-UI-Logs-${Environment}

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub policyedgeai-task-${Environment}
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: policyedgeai-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:${ECRImageTag}
          Essential: true
          PortMappings:
            - ContainerPort: !Ref APIContainerPort
              HostPort: !Ref APIContainerPort
              Protocol: tcp
            - ContainerPort: !Ref StreamlitContainerPort
              HostPort: !Ref StreamlitContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref APILogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: PORT
              Value: !Ref APIContainerPort
            - Name: STREAMLIT_PORT
              Value: !Ref StreamlitContainerPort
            - Name: API_URL
              Value: !Sub https://${APISubdomain}.${DomainName}
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: S3_BUCKET
              Value: !Ref S3Bucket
            - Name: DYNAMODB_PREFIX
              Value: !Sub PolicyEdgeAI-${Environment}
          Secrets:
            - Name: OPENAI_API_KEY
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/policyedgeai/${Environment}/openai-api-key
            - Name: ANTHROPIC_API_KEY
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/policyedgeai/${Environment}/anthropic-api-key
            - Name: JWT_SECRET_KEY
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/policyedgeai/${Environment}/jwt-secret-key
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Task-${Environment}

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - APIHTTPSListener
      - StreamlitHTTPSListener
    Properties:
      ServiceName: !Sub policyedgeai-service-${Environment}
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: policyedgeai-container
          ContainerPort: !Ref APIContainerPort
          TargetGroupArn: !Ref APITargetGroup
        - ContainerName: policyedgeai-container
          ContainerPort: !Ref StreamlitContainerPort
          TargetGroupArn: !Ref StreamlitTargetGroup
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Service-${Environment}

  # Auto Scaling
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref DesiredCount
      ResourceId: !Join
        - '/'
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub PolicyEdgeAI-ScalingPolicy-${Environment}
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  # CloudWatch Dashboard
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub PolicyEdgeAI-Dashboard-${Environment}
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ECS", "CPUUtilization", "ServiceName", "${ECSService.Name}", "ClusterName", "${ECSCluster}"]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "CPU Utilization"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ECS", "MemoryUtilization", "ServiceName", "${ECSService.Name}", "ClusterName", "${ECSCluster}"]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Memory Utilization"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${APIALB.LoadBalancerFullName}"]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "API Request Count"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${StreamlitALB.LoadBalancerFullName}"]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Dashboard Request Count"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${APIALB.LoadBalancerFullName}"]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "API Response Time"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "LoadBalancer", "${APIALB.LoadBalancerFullName}"],
                  ["AWS/ApplicationELB", "HTTPCode_Target_4XX_Count", "LoadBalancer", "${APIALB.LoadBalancerFullName}"]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "HTTP Errors"
              }
            }
          ]
        }

  # CI/CD Pipeline (Optional)
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Condition: EnableCICDCondition
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ExpireArtifacts
            Status: Enabled
            ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Artifacts-${Environment}

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Condition: EnableCICDCondition
    Properties:
      Name: !Sub policyedgeai-build-${Environment}
      Description: !Sub "Build and push Docker image for PolicyEdgeAI ${Environment}"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}
          - Name: ENVIRONMENT
            Value: !Ref Environment
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.9
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password | docker login --username AWS --password-stdin $REPOSITORY_URI
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=${COMMIT_HASH:=latest}
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
                - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $REPOSITORY_URI:$IMAGE_TAG
                - docker push $REPOSITORY_URI:latest
                - echo Writing task definition file...
                - aws ecs describe-task-definition --task-definition policyedgeai-task-${ENVIRONMENT} --query taskDefinition > task-definition.json
                - CONTAINER_NAME=$(jq -r '.containerDefinitions[0].name' task-definition.json)
                - jq --arg IMAGE "$REPOSITORY_URI:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE' task-definition.json > new-task-definition.json
                - cat new-task-definition.json
          artifacts:
            files:
              - new-task-definition.json
              - appspec.yaml
              - taskdef.json
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Build-${Environment}

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Condition: EnableCICDCondition
    Properties:
      Name: !Sub policyedgeai-pipeline-${Environment}
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Sub arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/your-github-connection-id
                FullRepositoryId: !Sub ${GitHubOwner}/${GitHubRepo}
                BranchName: !Ref GitHubBranch
              OutputArtifacts:
                - Name: SourceCode
        - Name: Build
          Actions:
            - Name: BuildAndPushImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !GetAtt ECSService.Name
                FileName: new-task-definition.json
              InputArtifacts:
                - Name: BuildOutput
      Tags:
        - Key: Name
          Value: !Sub PolicyEdgeAI-Pipeline-${Environment}

Outputs:
  APIEndpoint:
    Description: API Endpoint
    Value: !Sub https://${APISubdomain}.${DomainName}

  DashboardEndpoint:
    Description: Streamlit Dashboard Endpoint
    Value: !Sub https://${DashboardSubdomain}.${DomainName}

  MainWebsiteEndpoint:
    Description: Main Website Endpoint
    Value: !Sub https://${DomainName}

  S3BucketName:
    Description: S3 Bucket for file storage
    Value: !Ref S3Bucket

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster

  ECSServiceName:
    Description: ECS Service Name
    Value: !Ref ECSService

  CloudWatchDashboard:
    Description: CloudWatch Dashboard URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Dashboard}

  ParameterStorePrefix:
    Description: Parameter Store Prefix for secrets
    Value: !Sub /policyedgeai/${Environment}/